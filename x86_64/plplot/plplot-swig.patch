diff --git a/bindings/java/plplotjavac.i b/bindings/java/plplotjavac.i
index fe87d8fa4..18f4c4cba 100644
--- a/bindings/java/plplotjavac.i
+++ b/bindings/java/plplotjavac.i
@@ -2132,9 +2132,9 @@ PLBOOL_OUTPUT_TYPEMAP( PLBOOL, jboolean, boolean, Boolean, "[Ljava/lang/Boolean;
 %typemap( argout ) PLGraphicsIn * gin {
     PyObject *o;
     o         = PyFloat_FromDouble( $1->wX );
-    resultobj = t_output_helper( resultobj, o );
+    resultobj = SWIG_AppendOutput( resultobj, o );
     o         = PyFloat_FromDouble( $1->wY );
-    resultobj = t_output_helper( resultobj, o );
+    resultobj = SWIG_AppendOutput( resultobj, o );
 }
 #endif
 
diff --git a/bindings/python/plplotc.i b/bindings/python/plplotc.i
index b228f2023..3618a4f21 100644
--- a/bindings/python/plplotc.i
+++ b/bindings/python/plplotc.i
@@ -686,7 +686,7 @@ typedef PLINT          PLBOOL;
 }
 %typemap( argout ) ( const PLFLT * ArrayY, PLINT ny, PLFLT **OutMatrixCk )
 {
-    $result = SWIG_Python_AppendOutput( $result, array$argnum );
+    $result = SWIG_Python_AppendOutput( $result, array$argnum, 1 );
 }
 
 //**************************
@@ -753,9 +753,9 @@ typedef PLINT          PLBOOL;
 {
     $1 = buff;
 }
-%typemap( argout, fragment = "t_output_helper" ) char *OUTPUT {
+%typemap( argout ) char *OUTPUT {
     PyObject *o = PyString_FromString( $1 );
-    $result = t_output_helper( $result, o );
+    $result = SWIG_AppendOutput( $result, o );
 }
 
 //**************************
@@ -1039,7 +1039,7 @@ typedef void ( *label_func )( PLINT, PLFLT, char *, PLINT, PLPointer );
                 return;
             }
             // call the python function
-            result = PyEval_CallObject( python_pltr, arglist );
+            result = PyObject_CallObject( python_pltr, arglist );
             // release the argument list
             Py_CLEAR( arglist );
             // check and unpack the result
@@ -1088,7 +1088,7 @@ typedef void ( *label_func )( PLINT, PLFLT, char *, PLINT, PLPointer );
             // build the argument list
                 arglist = Py_BuildValue( "(iiO)", x, y, pdata );
             // call the python function
-            result = PyEval_CallObject( python_f2eval, arglist );
+            result = PyObject_CallObject( python_f2eval, arglist );
             // release the argument list
             Py_CLEAR( arglist );
             // check and unpack the result
@@ -1132,7 +1132,7 @@ typedef void ( *label_func )( PLINT, PLFLT, char *, PLINT, PLPointer );
             arglist = Py_BuildValue( "(lfO)", axis, value, pdata );
 #endif
             // call the python function
-            result = PyEval_CallObject( python_label, arglist );
+            result = PyObject_CallObject( python_label, arglist );
             // release the argument list
             //Py_CLEAR(arglist);
             // check and unpack the result
@@ -1189,7 +1189,7 @@ typedef void ( *label_func )( PLINT, PLFLT, char *, PLINT, PLPointer );
             py      = PyArray_SimpleNewFromData( 1, &n, NPY_PLFLT, (void *) yt );
             arglist = Py_BuildValue( "(ddOOO)", x, y, px, py, pdata );
             // call the python function
-            result = PyEval_CallObject( python_ct, arglist );
+            result = PyObject_CallObject( python_ct, arglist );
             // release the argument list
             Py_CLEAR( arglist );
             Py_CLEAR( px );
@@ -1230,7 +1230,7 @@ typedef void ( *label_func )( PLINT, PLFLT, char *, PLINT, PLPointer );
 #endif
             arglist = Py_BuildValue( "(iOO)", n, px, py );
             // call the python function
-            result = PyEval_CallObject( python_mapform, arglist );
+            result = PyObject_CallObject( python_mapform, arglist );
             // release the argument list
             Py_CLEAR( arglist );
             Py_CLEAR( px );
@@ -1666,9 +1666,9 @@ typedef void ( *label_func )( PLINT, PLFLT, char *, PLINT, PLPointer );
 %typemap( argout ) PLGraphicsIn * gin {
     PyObject *o;
     o         = PyFloat_FromDouble( $1->wX );
-    resultobj = t_output_helper( resultobj, o );
+    resultobj = SWIG_AppendOutput( resultobj, o );
     o         = PyFloat_FromDouble( $1->wY );
-    resultobj = t_output_helper( resultobj, o );
+    resultobj = SWIG_AppendOutput( resultobj, o );
 }
 #endif
 

diff --git a/src/common/LogEntry.h b/src/common/LogEntry.h
index 5de0b71efba..4804a66be46 100644
--- a/src/common/LogEntry.h
+++ b/src/common/LogEntry.h
@@ -213,14 +213,14 @@ inline std::ostream& operator<<(std::ostream& out, const LogEntry& e)
 
 template <> struct fmt::formatter<EntityName> : fmt::formatter<std::string_view> {
   template <typename FormatContext>
-  auto format(const EntityName& e, FormatContext& ctx) {
+  auto format(const EntityName& e, FormatContext& ctx) const {
     return formatter<std::string_view>::format(e.to_str(), ctx);
   }
 };
 
 template <> struct fmt::formatter<LogEntry> : fmt::formatter<std::string_view> {
   template <typename FormatContext>
-  auto format(const LogEntry& e, FormatContext& ctx) {
+  auto format(const LogEntry& e, FormatContext& ctx) const {
     return fmt::format_to(ctx.out(), "{} {} ({}) {} : {} [{}] {}",
                           e.stamp, e.name, e.rank, e.seq, e.channel,
                           LogEntry::level_to_str(e.prio), e.msg);
diff --git a/src/include/byteorder.h b/src/include/byteorder.h
index 25b06db982d..e378ac8f618 100644
--- a/src/include/byteorder.h
+++ b/src/include/byteorder.h
@@ -53,3 +53,8 @@ inline ceph_les16 init_les16(__s16 x) {
   v = x;
   return v;
 }
+
+template <typename T>
+auto format_as(ceph_le<T> c) {
+  return (T)c;
+}
diff --git a/src/include/types_fmt.h b/src/include/types_fmt.h
new file mode 100644
index 00000000000..3d40085f0b2
--- /dev/null
+++ b/src/include/types_fmt.h
@@ -0,0 +1,16 @@
+// -*- mode:C++; tab-width:8; c-basic-offset:2; indent-tabs-mode:t -*-
+// vim: ts=8 sw=2 smarttab
+#pragma once
+/**
+ * \file fmtlib formatters for some types.h classes
+ */
+
+#include <fmt/core.h>
+#if FMT_VERSION >= 90000
+#include <fmt/ostream.h>
+#endif
+
+#include <include/types.h>
+
+template <>
+struct fmt::formatter<shard_id_t> : fmt::ostream_formatter {};
diff --git a/src/osd/SnapMapper.cc b/src/osd/SnapMapper.cc
index aff77ca2409..7eaf09bde42 100644
--- a/src/osd/SnapMapper.cc
+++ b/src/osd/SnapMapper.cc
@@ -211,7 +211,7 @@ string SnapMapper::get_prefix(int64_t pool, snapid_t snap)
   return fmt::sprintf("%s%lld_%.16X_",
 		      MAPPING_PREFIX,
 		      pool,
-		      snap);
+		      (uint64_t)snap);
 }
 
 string SnapMapper::to_raw_key(
@@ -726,7 +726,7 @@ string SnapMapper::make_purged_snap_key(int64_t pool, snapid_t last)
   return fmt::sprintf("%s_%lld_%016llx",
 		      PURGED_SNAP_PREFIX,
 		      pool,
-		      last);
+		      (uint64_t)last);
 }
 
 void SnapMapper::make_purged_snap_key_value(
@@ -946,7 +946,7 @@ string SnapMapper::get_legacy_prefix(snapid_t snap)
 {
   return fmt::sprintf("%s%.16X_",
 		      LEGACY_MAPPING_PREFIX,
-		      snap);
+		      (uint64_t)snap);
 }
 
 string SnapMapper::to_legacy_raw_key(
diff --git a/src/osd/osd_types.h b/src/osd/osd_types.h
index 4ea254dc871..5e146289e1d 100644
--- a/src/osd/osd_types.h
+++ b/src/osd/osd_types.h
@@ -36,6 +36,7 @@
 #include "msg/msg_types.h"
 #include "include/compat.h"
 #include "include/types.h"
+#include "include/types_fmt.h"
 #include "include/utime.h"
 #include "include/CompatSet.h"
 #include "common/ceph_context.h"

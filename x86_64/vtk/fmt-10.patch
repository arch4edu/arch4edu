diff --git a/ThirdParty/ioss/vtkioss/Ioss_Field.C b/ThirdParty/ioss/vtkioss/Ioss_Field.C
index 62e1bdc93e..f0cafabca6 100644
--- a/ThirdParty/ioss/vtkioss/Ioss_Field.C
+++ b/ThirdParty/ioss/vtkioss/Ioss_Field.C
@@ -249,14 +249,14 @@ bool Ioss::Field::equal_(const Ioss::Field &rhs, bool quiet) const
 
   if (this->type_ != rhs.type_) {
     if (!quiet) {
-      fmt::print(Ioss::OUTPUT(), "\n\tFIELD type mismatch ({} v. {})", this->type_, rhs.type_);
+      fmt::print(Ioss::OUTPUT(), "\n\tFIELD type mismatch ({} v. {})", static_cast<int>(this->type_), static_cast<int>(rhs.type_));
     }
     return false;
   }
 
   if (this->role_ != rhs.role_) {
     if (!quiet) {
-      fmt::print(Ioss::OUTPUT(), "\n\tFIELD role mismatch ({} v. {})", this->role_, rhs.role_);
+      fmt::print(Ioss::OUTPUT(), "\n\tFIELD role mismatch ({} v. {})", static_cast<int>(this->role_), static_cast<int>(rhs.role_));
     }
     return false;
   }
diff --git a/ThirdParty/ioss/vtkioss/Ioss_GroupingEntity.C b/ThirdParty/ioss/vtkioss/Ioss_GroupingEntity.C
index 89158bec9d..db60449d73 100644
--- a/ThirdParty/ioss/vtkioss/Ioss_GroupingEntity.C
+++ b/ThirdParty/ioss/vtkioss/Ioss_GroupingEntity.C
@@ -356,7 +356,7 @@ bool Ioss::GroupingEntity::equal_(const Ioss::GroupingEntity &rhs, const bool qu
   if (this->entityState != rhs.entityState) {
     if (!quiet) {
       fmt::print(Ioss::OUTPUT(), "GroupingEntity: entityState mismatch ([] vs. [])\n",
-                 this->entityState, rhs.entityState);
+                 static_cast<int>(this->entityState), static_cast<int>(rhs.entityState));
     }
     return false;
   }
diff --git a/ThirdParty/ioss/vtkioss/Ioss_Region.C b/ThirdParty/ioss/vtkioss/Ioss_Region.C
index dcf53bea99..79816c16f9 100644
--- a/ThirdParty/ioss/vtkioss/Ioss_Region.C
+++ b/ThirdParty/ioss/vtkioss/Ioss_Region.C
@@ -1622,7 +1622,7 @@ namespace Ioss {
                "\n\nERROR: The entity named '{}' of type {} which is being aliased to '{}' does "
                "not exist in "
                "region '{}'.\n",
-               db_name, type, alias, name());
+               db_name, static_cast<int>(type), alias, name());
     IOSS_ERROR(errmsg);
   }
 
diff --git a/ThirdParty/ioss/vtkioss/cgns/Iocgns_DatabaseIO.C b/ThirdParty/ioss/vtkioss/cgns/Iocgns_DatabaseIO.C
index e4bc3c8ff1..6207990255 100644
--- a/ThirdParty/ioss/vtkioss/cgns/Iocgns_DatabaseIO.C
+++ b/ThirdParty/ioss/vtkioss/cgns/Iocgns_DatabaseIO.C
@@ -1332,7 +1332,7 @@ namespace Iocgns {
                      "ERROR: CGNS: Zone {} adjacency data is not correct type. Require "
                      "Abutting1to1 and PointList."
                      " {}\t{}\t{}",
-                     zone, connect_type, ptset_type, donor_ptset_type);
+                     zone, static_cast<int>(connect_type), static_cast<int>(ptset_type), static_cast<int>(donor_ptset_type));
           IOSS_ERROR(errmsg);
         }
 
diff --git a/ThirdParty/ioss/vtkioss/cgns/Iocgns_Utils.C b/ThirdParty/ioss/vtkioss/cgns/Iocgns_Utils.C
index 3768535aa7..bf115394a6 100644
--- a/ThirdParty/ioss/vtkioss/cgns/Iocgns_Utils.C
+++ b/ThirdParty/ioss/vtkioss/cgns/Iocgns_Utils.C
@@ -269,7 +269,7 @@ namespace {
         fmt::print(Ioss::WARNING(),
                    "On sideset '{}', the boundary condition type was previously set to {}"
                    " which does not match the current value of {}. It will keep the old value.\n",
-                   sset->name(), old_bocotype, bocotype);
+                   sset->name(), static_cast<int>(old_bocotype), static_cast<int>(bocotype));
       }
     }
     else {
diff --git a/ThirdParty/ioss/vtkioss/exodus/Ioex_BaseDatabaseIO.C b/ThirdParty/ioss/vtkioss/exodus/Ioex_BaseDatabaseIO.C
index d488007982..aef98f430a 100644
--- a/ThirdParty/ioss/vtkioss/exodus/Ioex_BaseDatabaseIO.C
+++ b/ThirdParty/ioss/vtkioss/exodus/Ioex_BaseDatabaseIO.C
@@ -762,7 +762,7 @@ namespace Ioex {
             std::ostringstream errmsg;
             fmt::print(errmsg,
                        "Error: Failed to find entity of type {} with id {} for assembly {}.\n",
-                       type, assembly.entity_list[j], assem->name());
+                       static_cast<int>(type), assembly.entity_list[j], assem->name());
             IOSS_ERROR(errmsg);
           }
 
diff --git a/ThirdParty/ioss/vtkioss/exodus/Ioex_DatabaseIO.C b/ThirdParty/ioss/vtkioss/exodus/Ioex_DatabaseIO.C
index 98de3a2acf..71a2c9f724 100644
--- a/ThirdParty/ioss/vtkioss/exodus/Ioex_DatabaseIO.C
+++ b/ThirdParty/ioss/vtkioss/exodus/Ioex_DatabaseIO.C
@@ -1760,7 +1760,7 @@ namespace Ioex {
               fmt::print(errmsg,
                          "INTERNAL ERROR: Invalid setting for `split_type` {}. Something is wrong "
                          "in the Ioex::DatabaseIO class. Please report.\n",
-                         split_type);
+                         static_cast<int>(split_type));
               IOSS_ERROR(errmsg);
             }
             assert(elem_topo != nullptr);
diff --git a/ThirdParty/ioss/vtkioss/exodus/Ioex_SuperElement.C b/ThirdParty/ioss/vtkioss/exodus/Ioex_SuperElement.C
index bf3261fd6c..ec7ee7544e 100644
--- a/ThirdParty/ioss/vtkioss/exodus/Ioex_SuperElement.C
+++ b/ThirdParty/ioss/vtkioss/exodus/Ioex_SuperElement.C
@@ -242,7 +242,7 @@ int64_t Ioex::SuperElement::internal_get_field_data(const Ioss::Field &field, vo
     }
   }
   else {
-    fmt::print(Ioss::WARNING(), "{} '{}'. Unknown input field '{}'", type(), name(),
+    fmt::print(Ioss::WARNING(), "{} '{}'. Unknown input field '{}'", static_cast<int>(type()), name(),
                field.get_name());
     return -4;
   }
